class
 refid "tribulle.auto.protocole.type:TT_Rang"
 instance QName(PackageNamespace("tribulle.auto.protocole.type"), "TT_Rang")
  extends QName(PackageNamespace(""), "Object")
  implements QName(PackageNamespace("lapitchnet.reseau.interfaces"), "ITypeReseau")
  flag SEALED
  iinit
   refid "tribulle.auto.protocole.type:TT_Rang/iinit"
   param QName(PackageNamespace(""), "int")
   param QName(PackageNamespace(""), "String")
   param QName(PackageNamespace(""), "Boolean")
   param QName(PackageNamespace(""), "int")
   param QName(PackageNamespace(""), "int")
   param TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Boolean")>)
   flag HAS_OPTIONAL
   optional Integer(0)
   optional Null()
   optional False()
   optional Integer(0)
   optional Integer(0)
   optional Null()
   body
    maxstack 2
    localcount 7
    initscopedepth 0
    maxscopedepth 1
    code
     getlocal0
     pushscope

     getlocal0
     constructsuper      0

     getlocal0
     getlocal1
     setproperty         QName(PackageNamespace(""), "id")

     getlocal0
     getlocal2
     setproperty         QName(PackageNamespace(""), "nom")

     getlocal0
     getlocal3
     setproperty         QName(PackageNamespace(""), "bloque")

     getlocal0
     getlocal            4
     setproperty         QName(PackageNamespace(""), "couleur")

     getlocal0
     getlocal            5
     setproperty         QName(PackageNamespace(""), "ordre")

     getlocal0
     getlocal            6
     setproperty         QName(PackageNamespace(""), "activationDroits")

     returnvoid
    end ; code
   end ; body
  end ; method
  trait slot QName(PackageNamespace(""), "id") type QName(PackageNamespace(""), "int") end
  trait slot QName(PackageNamespace(""), "nom") type QName(PackageNamespace(""), "String") end
  trait slot QName(PackageNamespace(""), "bloque") type QName(PackageNamespace(""), "Boolean") end
  trait slot QName(PackageNamespace(""), "couleur") type QName(PackageNamespace(""), "int") end
  trait slot QName(PackageNamespace(""), "ordre") type QName(PackageNamespace(""), "int") end
  trait slot QName(PackageNamespace(""), "activationDroits") type TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Boolean")>) end
  trait method QName(PackageNamespace(""), "getTaille")
   method
    refid "tribulle.auto.protocole.type:TT_Rang/getTaille"
    returns QName(PackageNamespace(""), "int")
    body
     maxstack 3
     localcount 1
     initscopedepth 0
     maxscopedepth 1
     code
      getlocal0
      pushscope

      pushbyte            14
      getlex              QName(PackageNamespace(""), "nom")
      getproperty         QName(PackageNamespace(""), "length")
      add
      getlex              QName(PackageNamespace(""), "activationDroits")
      getproperty         QName(PackageNamespace(""), "length")
      pushbyte            1
      multiply
      add
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "ecriture")
   method
    refid "tribulle.auto.protocole.type:TT_Rang/ecriture"
    param QName(PackageNamespace("flash.utils"), "ByteArray")
    returns QName(PackageNamespace(""), "void")
    body
     maxstack 3
     localcount 4
     initscopedepth 0
     maxscopedepth 1
     code
      getlocal0
      pushscope

      pushbyte            0
      setlocal3

      getlocal1
      getlex              QName(PackageNamespace(""), "id")
      callpropvoid        QName(PackageNamespace(""), "writeInt"), 1

      getlocal1
      getlex              QName(PackageNamespace(""), "nom")
      callpropvoid        QName(PackageNamespace(""), "writeUTF"), 1

      getlocal1
      getlex              QName(PackageNamespace(""), "bloque")
      iffalse             L15

      pushbyte            1
      jump                L16

L15:
      pushdouble          0
L16:
      callpropvoid        QName(PackageNamespace(""), "writeByte"), 1

      getlocal1
      getlex              QName(PackageNamespace(""), "couleur")
      callpropvoid        QName(PackageNamespace(""), "writeInt"), 1

      getlocal1
      getlex              QName(PackageNamespace(""), "ordre")
      callpropvoid        QName(PackageNamespace(""), "writeByte"), 1

      getlex              QName(PackageNamespace(""), "activationDroits")
      getproperty         QName(PackageNamespace(""), "length")
      convert_i
      setlocal2

      getlocal1
      getlocal2
      callpropvoid        QName(PackageNamespace(""), "writeShort"), 1

      pushbyte            0
      setlocal3

      jump                L44

L33:
      label
      getlocal1
      getlex              QName(PackageNamespace(""), "activationDroits")
      getlocal3
      getproperty         MultinameL([PrivateNamespace(null, "tribulle.auto.protocole.type:TT_Rang#0"), ProtectedNamespace("tribulle.auto.protocole.type:TT_Rang"), StaticProtectedNs("tribulle.auto.protocole.type:TT_Rang"), StaticProtectedNs("Object"), PackageNamespace("tribulle.auto.protocole.type"), PackageInternalNs("tribulle.auto.protocole.type"), PrivateNamespace(null, "tribulle.auto.protocole.type:TT_Rang#1"), PackageNamespace(""), Namespace("http://adobe.com/AS3/2006/builtin")])
      iffalse             L41

      pushbyte            1
      jump                L42

L41:
      pushdouble          0
L42:
      callpropvoid        QName(PackageNamespace(""), "writeByte"), 1

      inclocal_i          3
L44:
      getlocal3
      getlocal2
      iflt                L33

      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "lecture")
   method
    refid "tribulle.auto.protocole.type:TT_Rang/lecture"
    param QName(PackageNamespace("flash.utils"), "ByteArray")
    returns QName(PackageNamespace(""), "void")
    body
     maxstack 4
     localcount 5
     initscopedepth 0
     maxscopedepth 1
     code
      getlocal0
      pushscope

      pushbyte            0
      setlocal            4

      getlocal1
      callproperty        QName(PackageNamespace(""), "readInt"), 0
      findproperty        QName(PackageNamespace(""), "id")
      swap
      setproperty         QName(PackageNamespace(""), "id")

      getlocal1
      callproperty        QName(PackageNamespace(""), "readShort"), 0
      convert_i
      setlocal3

      getlocal1
      getlocal3
      callproperty        QName(PackageNamespace(""), "readUTFBytes"), 1
      findproperty        QName(PackageNamespace(""), "nom")
      swap
      setproperty         QName(PackageNamespace(""), "nom")

      getlocal1
      callproperty        QName(PackageNamespace(""), "readByte"), 0
      pushbyte            0
      equals
      not
      findproperty        QName(PackageNamespace(""), "bloque")
      swap
      setproperty         QName(PackageNamespace(""), "bloque")

      getlocal1
      callproperty        QName(PackageNamespace(""), "readInt"), 0
      findproperty        QName(PackageNamespace(""), "couleur")
      swap
      setproperty         QName(PackageNamespace(""), "couleur")

      getlocal1
      callproperty        QName(PackageNamespace(""), "readByte"), 0
      findproperty        QName(PackageNamespace(""), "ordre")
      swap
      setproperty         QName(PackageNamespace(""), "ordre")

      getlocal1
      callproperty        QName(PackageNamespace(""), "readShort"), 0
      convert_i
      setlocal2

      getlex              QName(PackageNamespace("__AS3__.vec"), "Vector")
      getlex              QName(PackageNamespace(""), "Boolean")
      applytype           1
      getlocal2
      construct           1
      findproperty        QName(PackageNamespace(""), "activationDroits")
      swap
      setproperty         QName(PackageNamespace(""), "activationDroits")

      pushbyte            0
      setlocal            4

      jump                L62

L52:
      label
      getlex              QName(PackageNamespace(""), "activationDroits")
      getlocal            4
      getlocal1
      callproperty        QName(PackageNamespace(""), "readByte"), 0
      pushbyte            0
      equals
      not
      setproperty         MultinameL([PrivateNamespace(null, "tribulle.auto.protocole.type:TT_Rang#0"), ProtectedNamespace("tribulle.auto.protocole.type:TT_Rang"), StaticProtectedNs("tribulle.auto.protocole.type:TT_Rang"), StaticProtectedNs("Object"), PackageNamespace("tribulle.auto.protocole.type"), PackageInternalNs("tribulle.auto.protocole.type"), PrivateNamespace(null, "tribulle.auto.protocole.type:TT_Rang#1"), PackageNamespace(""), Namespace("http://adobe.com/AS3/2006/builtin")])

      inclocal_i          4
L62:
      getlocal            4
      getlocal2
      iflt                L52

      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
 end ; instance
 cinit
  refid "tribulle.auto.protocole.type:TT_Rang/cinit"
  body
   maxstack 0
   localcount 1
   initscopedepth 0
   maxscopedepth 0
   code
    returnvoid
   end ; code
  end ; body
 end ; method
 trait method QName(PackageNamespace(""), "cree")
  method
   refid "tribulle.auto.protocole.type:TT_Rang/cree"
   param QName(PackageNamespace("flash.utils"), "ByteArray")
   returns QName(PackageNamespace("tribulle.auto.protocole.type"), "TT_Rang")
   body
    maxstack 2
    localcount 3
    initscopedepth 0
    maxscopedepth 1
    code
     getlocal0
     pushscope

     getlocal0
     construct           0
     coerce              QName(PackageNamespace("tribulle.auto.protocole.type"), "TT_Rang")
     setlocal2

     getlocal2
     getlocal1
     callpropvoid        QName(PackageNamespace(""), "lecture"), 1

     getlocal2
     returnvalue
    end ; code
   end ; body
  end ; method
 end ; trait
end ; class
